import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{r as i,s as g,e as V,I as y,T as p,M as b,k as t}from"./styles-CyDUY6mG.js";import{s as A,V as s}from"./index-BzmpT3sc.js";import"./index-DI7CEG0L.js";const o=A.create({container:{borderRadius:g.S,borderWidth:.5,padding:i.M,width:"100%"},image:{width:40,height:40,borderRadius:g.XS,marginRight:i.S},icon:{marginRight:i.S,marginTop:i.XXS},closeIcon:{marginTop:i.XXS},row:{flexDirection:"row"},cta:{width:"100%",alignItems:"flex-end"},flex:{flex:1}}),_=({title:n,description:v="Description",state:f="default",image:a,onPressCTA:I,showIcon:k=!0,CTA:h,style:j,showIconClose:C=!0,onPressClose:S})=>{const D=()=>{let l=t.blue_07,d=t.blue_10,c=t.blue_03,u="notifications_info";return f==="warning"&&(l=t.yellow_06,d=t.yellow_09,c=t.orange_03,u="24_notifications_alert_triangle"),f==="error"&&(l=t.red_07,d=t.red_10,c=t.red_03,u="24_notifications_alert_octagon"),{borderColor:l,backgroundColor:d,color:c,iconSource:u}},{backgroundColor:O,borderColor:q,color:m,iconSource:R}=D();return e.jsxs(s,{style:[j,{backgroundColor:O,borderColor:q},o.container],children:[e.jsxs(s,{style:o.row,children:[!!a&&e.jsx(V,{source:{uri:a},style:o.image}),!a&&k&&e.jsx(y,{color:m,style:o.icon,size:16,source:R}),e.jsxs(s,{style:o.flex,children:[!!n&&e.jsx(p,{typography:"label_default_medium",children:n}),e.jsx(p,{typography:"description_default_regular",children:v})]}),C&&e.jsx(b,{onPress:S,children:e.jsx(y,{size:16,source:"navigation_close",style:o.closeIcon})})]}),!!h&&e.jsx(b,{style:o.cta,onPress:I,children:e.jsx(p,{color:m,typography:"action_xs_bold",children:h})})]})};_.__docgenInfo={description:"",methods:[],displayName:"Information",props:{title:{required:!1,tsType:{name:"string"},description:`Optional. The title for the information block, often used to emphasize the main theme or
to indicate the reason for the message. If not provided, only the description will be shown.`},description:{required:!1,tsType:{name:"string"},description:`The main content text of the information block. This text provides the necessary details
and is essential for understanding the context of the message.`,defaultValue:{value:"'Description'",computed:!1}},CTA:{required:!1,tsType:{name:"string"},description:`Optional. The text for the Call To Action (CTA) button. This is intended to prompt the user
to take some specified action like "Retry", "Learn More", or "Dismiss".`},onPressCTA:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:`Optional. A callback function that is triggered when the CTA button is pressed. This is
used to handle the user's response to the proposed call to action.`},image:{required:!1,tsType:{name:"string"},description:`Optional. The URL or local file path of an image to be displayed. This is typically used
to provide visual context or support to the information being presented.`},state:{required:!1,tsType:{name:"union",raw:"'default' | 'warning' | 'error'",elements:[{name:"literal",value:"'default'"},{name:"literal",value:"'warning'"},{name:"literal",value:"'error'"}]},description:`Optional. Specifies the state of the information block, which may influence the block's
styling, such as color coding. The 'default' state is neutral, while 'warning' and 'error'
represent increasing levels of urgency or attention.
Defaults to 'default' if not provided.`,defaultValue:{value:"'default'",computed:!1}},showIcon:{required:!1,tsType:{name:"boolean"},description:"Optional. If `true`, an icon is displayed within the information block, often used to\nvisually reinforce the state or content of the block. The type of icon is typically\ninfluenced by the `state` prop.\nDefaults to `false` if not provided.",defaultValue:{value:"true",computed:!1}},showIconClose:{required:!1,tsType:{name:"boolean"},description:"Optional. If `true`, a close icon is displayed, usually in the upper corner of the information\nblock, indicating that the user can dismiss or remove the block from view.\nDefaults to `false` if not provided.",defaultValue:{value:"true",computed:!1}},onPressClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:`Optional. A callback function that is triggered when the close icon is pressed. This is
used to handle the dismissal of the information block, often removing it from display.`},style:{required:!1,tsType:{name:"ViewStyle"},description:`Optional. Custom styles to apply to the Information component. Can be used to adjust
the visual presentation or layout beyond the default and state-based styling.`}}};const L={title:"Library/Information",component:_,parameters:{layout:"centered"},tags:["autodocs"],decorators:[n=>e.jsx(s,{style:{width:375},children:e.jsx(n,{})})]},r={args:{title:"Default Information",description:"This is a default information message"}};var T,x,w;r.parameters={...r.parameters,docs:{...(T=r.parameters)==null?void 0:T.docs,source:{originalSource:`{
  args: {
    title: 'Default Information',
    description: 'This is a default information message'
  }
}`,...(w=(x=r.parameters)==null?void 0:x.docs)==null?void 0:w.source}}};const E=["Default"];export{r as Default,E as __namedExportsOrder,L as default};

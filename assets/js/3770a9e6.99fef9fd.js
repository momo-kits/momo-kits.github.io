(self.webpackChunkmomo_kits_website=self.webpackChunkmomo_kits_website||[]).push([[31463],{65727:(e,t,n)=>{"use strict";n.d(t,{A:()=>d});var a=n(74892),r=n(16943),l=n(95412),i=n(93884),o=n(4107);const d=function(){var e=(0,i.A)({componentName:"Tag",props:{label:{value:"Tag Label",type:o.B.String,description:"Represents the text label displayed on the Tag component."},size:{value:"medium",type:o.B.Enum,options:{medium:"medium",large:"large"},description:'Optional. Defines the size of the Tag component. Defaults to "medium" if not provided.'},icon:{value:void 0,type:o.B.String,description:"Optional. Represents the name or key of the icon to be displayed in the Tag component."},color:{value:"default",type:o.B.Enum,options:{default:"default",orange:"orange",green:"green",red:"red",blue:"blue",grey:"grey"},description:"Optional. Defines the color style of the Tag component."},style:{value:"{}",type:o.B.Object,description:"Optional. Used to apply custom styling to the Tag component. Accepts an object of style properties."},customColor:{value:"",type:o.B.String,description:"Optional. Represents a custom color string (e.g., hex, rgb, rgba, etc.) that can be applied to the Tag component."}},scope:{Tag:r.vw},imports:{"@momo-kits/foundation":{named:["Tag"]}}});return a.createElement(a.Fragment,null,a.createElement(l.A,{params:e}))}},95412:(e,t,n)=>{"use strict";n.d(t,{A:()=>m});var a=n(58168),r=n(74892),l=n(29813),i=n(91906),o=n(76482),d=n(5789),p=n(5641),g=n(10991),s=n(3533);const m=function(e){var t=e.params;return r.createElement(l.A,{fallback:r.createElement(r.Fragment,null,"Loading...")},(function(){return r.createElement("div",null,r.createElement("div",{style:{border:"1px solid var(--ifm-color-emphasis-200)",borderRadius:"var(--ifm-global-radius)",position:"relative",paddingLeft:16,paddingRight:16,fontFamily:"SFProText"}},r.createElement(i.A,(0,a.A)({},t.compilerProps,{minHeight:62,placeholder:o.A}))),r.createElement(d.A,{msg:t.errorProps.msg,isPopup:!0}),r.createElement(p.A,t.knobProps),r.createElement(g.A,t.editorProps),r.createElement(d.A,t.errorProps),r.createElement(s.w,t.actions))}))}},83378:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>d,metadata:()=>g,toc:()=>m});var a=n(58168),r=n(98587),l=(n(74892),n(77264)),i=n(65727),o=["components"],d={id:"tag",title:"Tag"},p=void 0,g={unversionedId:"components/tag",id:"version-0.109.x/components/tag",title:"Tag",description:"Playground",source:"@site/versioned_docs/version-0.109.x/components/Tag.mdx",sourceDirName:"components",slug:"/components/tag",permalink:"/docs/components/tag",draft:!1,editUrl:"https://github.com/versioned_docs/version-0.109.x/components/Tag.mdx",tags:[],version:"0.109.x",frontMatter:{id:"tag",title:"Tag"},sidebar:"version-0.109.x",previous:{title:"Switch",permalink:"/docs/components/switch"},next:{title:"Text",permalink:"/docs/components/text"}},s={},m=[{value:"Playground",id:"playground",level:2},{value:"Props",id:"props",level:2}],y={toc:m},c="wrapper";function u(e){var t=e.components,n=(0,r.A)(e,o);return(0,l.yg)(c,(0,a.A)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h2",{id:"playground"},"Playground"),(0,l.yg)(i.A,{mdxType:"Play"}),(0,l.yg)("h2",{id:"props"},"Props"),(0,l.yg)("div",{class:"table-responsive"},(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"Name"),(0,l.yg)("th",{parentName:"tr",align:null},"Type"),(0,l.yg)("th",{parentName:"tr",align:null},"Default"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"accessibilityLabelContainer")),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"Overrides the text that's read by the screen reader when the user interacts with the element. By default, thelabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"accessibilityLabelText")),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},"Overrides the text that's read by the screen reader when the user interacts with the element. By default, thelabel is constructed by traversing all the children and accumulating all the Text nodes separated by space.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"color")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"default")," ","|"," ",(0,l.yg)("inlineCode",{parentName:"td"},"orange")," ","|"," ",(0,l.yg)("inlineCode",{parentName:"td"},"green")," ","|"," ",(0,l.yg)("inlineCode",{parentName:"td"},"red")," ","|"," ",(0,l.yg)("inlineCode",{parentName:"td"},"blue")," ","|"," ",(0,l.yg)("inlineCode",{parentName:"td"},"grey")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"default")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"color"),": Optional. Defines the color style of the Tag component.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"customColor")),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"customColor"),": Optional. Represents a custom color string (e.g., hex, rgb, rgba, etc.)that can be applied to the Tag component.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"icon")),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"icon"),": Optional. Represents the name or key of the icon to be displayed in the Tag component.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"label")),(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"Label")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"label"),": Represents the text label displayed on the Tag component.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"size")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"large")," ","|"," ",(0,l.yg)("inlineCode",{parentName:"td"},"medium")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"large")),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"size"),": Optional. Defines the size of the Tag component.Defaults to 'medium' if not provided.")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"style")),(0,l.yg)("td",{parentName:"tr",align:null},"ViewStyle"),(0,l.yg)("td",{parentName:"tr",align:null}),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},"style"),": Optional. Used to apply custom styling to the Tag component.Accepts an object of style properties."))))))}u.isMDXComponent=!0},52352:()=>{},18411:()=>{}}]);